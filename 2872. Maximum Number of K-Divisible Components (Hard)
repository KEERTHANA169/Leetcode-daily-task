class Solution {
    public int maxKDivisibleComponents(int n, int[][] edges, int[] values, int k) {
        List<Integer>[] adj = new List[n];
        int[] degree = new int[n];
        long[] sums = new long[n];

        for (var i = 0; i < n; i++) {
            adj[i] = new ArrayList<>();
        }

        for (var e : edges) {
            degree[e[0]]++;
            degree[e[1]]++;

            adj[e[0]].add(e[1]);
            adj[e[1]].add(e[0]);
        }

        var bfs = new Object() {
            int ans = 0;
            void apply() {
                var queue = new ArrayDeque<Integer>();
                for (int i = 0; i < n; i++) {
                    if (degree[i] == 1) {
                        queue.addLast(i);
                    }
                }

                if (queue.isEmpty()) {
                    ans++;
                    return;
                }

                while (!queue.isEmpty()) {
                    var v = queue.pollFirst();
                    sums[v] += (long) values[v];
                    if (sums[v] % k == 0) {
                        ans++;
                    }

                    for (var u : adj[v]) {
                        sums[u] += sums[v] % k == 0 ? 0 : sums[v];
                        if (--degree[u] == 1) {
                            queue.addLast(u);
                        }
                    }
                }
            }
        };

        var dfs = new Object() {
            int ans = 0;
            
            long apply(int v, int p) {
                long s = (long) values[v];

                for (var u : adj[v]) {
                    if (u == p) {
                        continue;
                    }
                    long s2 = apply(u, v);
                    s += s2;
                }

                if (s % k == 0) {
                    ans++;
                    return 0;
                }

                return s;
            }
        };

        bfs.apply();
        // dfs.apply(0, -1);
        return bfs.ans;
    }
}
