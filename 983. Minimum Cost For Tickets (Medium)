class Solution {
    private int f(int []days,int []costs,int ind,int []dp)
    {
        if(ind>=days.length)
            return 0;
        
        if(dp[ind]!=-1)
            return dp[ind];

        int option1=costs[0]+f(days,costs,ind+1,dp);

        int i=ind;
        while(i<days.length && days[i]-days[ind]<7)
            i++;
        int option2=costs[1]+f(days,costs,i,dp);

        i=ind;
        while(i<days.length && days[i]-days[ind]<30)
            i++;
        int option3=costs[2]+f(days,costs,i,dp);

        return dp[ind]=Math.min(option1,Math.min(option2,option3));
    }

    public int mincostTickets(int[] days, int[] costs) {
        int []dp=new int[days.length];
        Arrays.fill(dp,-1);
        return f(days,costs,0,dp);
    }
}
